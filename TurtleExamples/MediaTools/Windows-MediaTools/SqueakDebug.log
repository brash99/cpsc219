Error: At least one digit expected here18 June 2009 1:12:42 pmVM: Win32 - Squeak3.3alpha of 24 January 2002 [latest update: #4967]Image: Squeak 3.2 [latest update: #4917]Integer class(Object)>>error:	Receiver: Integer	Arguments and temporary variables: 		t1: 	'At least one digit expected here'	Receiver's instance variables: 		superclass: 	Number		methodDict: 	a MethodDictionary(#*->a CompiledMethod (956) #+->a CompiledMethod ...etc...		format: 	2		instanceVariables: 	nil		organization: 	('testing' even isInteger isPowerOfTwo)('arithmetic' * + - / // ...etc...		subclasses: 	#(SmallInteger LargePositiveInteger)		name: 	#Integer		classPool: 	a Dictionary()		sharedPools: 	nil		environment: 	nil		category: 	nilInteger class>>readFrom:base:	Receiver: Integer	Arguments and temporary variables: 		t1: 	a ReadStream		t2: 	10		t3: 	-2		t4: 	0		t5: 	false		t6: 	0	Receiver's instance variables: 		superclass: 	Number		methodDict: 	a MethodDictionary(#*->a CompiledMethod (956) #+->a CompiledMethod ...etc...		format: 	2		instanceVariables: 	nil		organization: 	('testing' even isInteger isPowerOfTwo)('arithmetic' * + - / // ...etc...		subclasses: 	#(SmallInteger LargePositiveInteger)		name: 	#Integer		classPool: 	a Dictionary()		sharedPools: 	nil		environment: 	nil		category: 	nilNumber class>>readFrom:	Receiver: Number	Arguments and temporary variables: 		t1: 	a ReadStream		t2: 	nil		t3: 	10		t4: 	a ReadStream		t5: 	1	Receiver's instance variables: 		superclass: 	Magnitude		methodDict: 	a MethodDictionary(#*->a CompiledMethod (540) #+->a CompiledMethod ...etc...		format: 	2		instanceVariables: 	nil		organization: 	('arithmetic' * + - / // \\ abs negated quo: reciprocal rem:)('m...etc...		subclasses: 	#(Fraction Float Integer)		name: 	#Number		classPool: 	a Dictionary()		sharedPools: 	nil		environment: 	nil		category: 	nilNumber class(Object)>>readFromString:	Receiver: Number	Arguments and temporary variables: 		t1: 	'.25'	Receiver's instance variables: 		superclass: 	Magnitude		methodDict: 	a MethodDictionary(#*->a CompiledMethod (540) #+->a CompiledMethod ...etc...		format: 	2		instanceVariables: 	nil		organization: 	('arithmetic' * + - / // \\ abs negated quo: reciprocal rem:)('m...etc...		subclasses: 	#(Fraction Float Integer)		name: 	#Number		classPool: 	a Dictionary()		sharedPools: 	nil		environment: 	nil		category: 	nil--- The rest of the stack ---String>>asNumberPlayer54>>script1EventHandler>>send:to:withEvent:fromMorph:EventHandler>>mouseDown:fromMorph:ScalingButton(Morph)>>mouseDown:ScalingButton(Morph)>>handleMouseDown:MouseButtonEvent>>sentTo:ScalingButton(Morph)>>handleEvent:MorphicEventDispatcher>>dispatchMouseDown:with:MorphicEventDispatcher>>dispatchEvent:with:ScalingButton(Morph)>>processEvent:using:MorphicEventDispatcher>>dispatchMouseDown:with:MorphicEventDispatcher>>dispatchEvent:with:PasteUpMorph(Morph)>>processEvent:using:PasteUpMorph>>processEvent:using:PasteUpMorph(Morph)>>processEvent:HandMorph>>sendEvent:focus:clear:HandMorph>>sendMouseEvent:HandMorph>>handleEvent:HandMorph>>processEvents[] in WorldState>>doOneCycleNowFor:Array(SequenceableCollection)>>do:WorldState>>handsDo:WorldState>>doOneCycleNowFor:WorldState>>doOneCycleFor:PasteUpMorph>>doOneCycle[] in Project class>>spawnNewProcess[] in BlockContext>>newProcess